// Copyright 2022 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by MockGen. DO NOT EDIT.
// Source: ./runtime/pkg/reconciler/event.go

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockEventEmitter is a mock of EventEmitter interface.
type MockEventEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockEventEmitterMockRecorder
}

// MockEventEmitterMockRecorder is the mock recorder for MockEventEmitter.
type MockEventEmitterMockRecorder struct {
	mock *MockEventEmitter
}

// NewMockEventEmitter creates a new mock instance.
func NewMockEventEmitter(ctrl *gomock.Controller) *MockEventEmitter {
	mock := &MockEventEmitter{ctrl: ctrl}
	mock.recorder = &MockEventEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventEmitter) EXPECT() *MockEventEmitterMockRecorder {
	return m.recorder
}

// EmitEventGeneric mocks base method.
func (m *MockEventEmitter) EmitEventGeneric(eventReason, msg string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventGeneric", eventReason, msg, err)
}

// EmitEventGeneric indicates an expected call of EmitEventGeneric.
func (mr *MockEventEmitterMockRecorder) EmitEventGeneric(eventReason, msg, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventGeneric", reflect.TypeOf((*MockEventEmitter)(nil).EmitEventGeneric), eventReason, msg, err)
}

// EmitEventOnCreate mocks base method.
func (m *MockEventEmitter) EmitEventOnCreate(createObj client.Object, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnCreate", createObj, err)
}

// EmitEventOnCreate indicates an expected call of EmitEventOnCreate.
func (mr *MockEventEmitterMockRecorder) EmitEventOnCreate(createObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnCreate", reflect.TypeOf((*MockEventEmitter)(nil).EmitEventOnCreate), createObj, err)
}

// EmitEventOnDelete mocks base method.
func (m *MockEventEmitter) EmitEventOnDelete(deleteObj client.Object, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnDelete", deleteObj, err)
}

// EmitEventOnDelete indicates an expected call of EmitEventOnDelete.
func (mr *MockEventEmitterMockRecorder) EmitEventOnDelete(deleteObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnDelete", reflect.TypeOf((*MockEventEmitter)(nil).EmitEventOnDelete), deleteObj, err)
}

// EmitEventOnGetError mocks base method.
func (m *MockEventEmitter) EmitEventOnGetError(getObj client.Object, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnGetError", getObj, err)
}

// EmitEventOnGetError indicates an expected call of EmitEventOnGetError.
func (mr *MockEventEmitterMockRecorder) EmitEventOnGetError(getObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnGetError", reflect.TypeOf((*MockEventEmitter)(nil).EmitEventOnGetError), getObj, err)
}

// EmitEventOnList mocks base method.
func (m *MockEventEmitter) EmitEventOnList(listObj client.ObjectList, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnList", listObj, err)
}

// EmitEventOnList indicates an expected call of EmitEventOnList.
func (mr *MockEventEmitterMockRecorder) EmitEventOnList(listObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnList", reflect.TypeOf((*MockEventEmitter)(nil).EmitEventOnList), listObj, err)
}

// EmitEventOnPatch mocks base method.
func (m *MockEventEmitter) EmitEventOnPatch(patchObj client.Object, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnPatch", patchObj, err)
}

// EmitEventOnPatch indicates an expected call of EmitEventOnPatch.
func (mr *MockEventEmitterMockRecorder) EmitEventOnPatch(patchObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnPatch", reflect.TypeOf((*MockEventEmitter)(nil).EmitEventOnPatch), patchObj, err)
}

// EmitEventOnUpdate mocks base method.
func (m *MockEventEmitter) EmitEventOnUpdate(updateObj client.Object, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnUpdate", updateObj, err)
}

// EmitEventOnUpdate indicates an expected call of EmitEventOnUpdate.
func (mr *MockEventEmitterMockRecorder) EmitEventOnUpdate(updateObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnUpdate", reflect.TypeOf((*MockEventEmitter)(nil).EmitEventOnUpdate), updateObj, err)
}

// EmitEventRollingDeployWait mocks base method.
func (m *MockEventEmitter) EmitEventRollingDeployWait(k8sObj client.Object) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventRollingDeployWait", k8sObj)
}

// EmitEventRollingDeployWait indicates an expected call of EmitEventRollingDeployWait.
func (mr *MockEventEmitterMockRecorder) EmitEventRollingDeployWait(k8sObj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventRollingDeployWait", reflect.TypeOf((*MockEventEmitter)(nil).EmitEventRollingDeployWait), k8sObj)
}

// MockK8sEventEmitter is a mock of K8sEventEmitter interface.
type MockK8sEventEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockK8sEventEmitterMockRecorder
}

// MockK8sEventEmitterMockRecorder is the mock recorder for MockK8sEventEmitter.
type MockK8sEventEmitterMockRecorder struct {
	mock *MockK8sEventEmitter
}

// NewMockK8sEventEmitter creates a new mock instance.
func NewMockK8sEventEmitter(ctrl *gomock.Controller) *MockK8sEventEmitter {
	mock := &MockK8sEventEmitter{ctrl: ctrl}
	mock.recorder = &MockK8sEventEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8sEventEmitter) EXPECT() *MockK8sEventEmitterMockRecorder {
	return m.recorder
}

// EmitEventOnCreate mocks base method.
func (m *MockK8sEventEmitter) EmitEventOnCreate(createObj client.Object, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnCreate", createObj, err)
}

// EmitEventOnCreate indicates an expected call of EmitEventOnCreate.
func (mr *MockK8sEventEmitterMockRecorder) EmitEventOnCreate(createObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnCreate", reflect.TypeOf((*MockK8sEventEmitter)(nil).EmitEventOnCreate), createObj, err)
}

// EmitEventOnDelete mocks base method.
func (m *MockK8sEventEmitter) EmitEventOnDelete(deleteObj client.Object, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnDelete", deleteObj, err)
}

// EmitEventOnDelete indicates an expected call of EmitEventOnDelete.
func (mr *MockK8sEventEmitterMockRecorder) EmitEventOnDelete(deleteObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnDelete", reflect.TypeOf((*MockK8sEventEmitter)(nil).EmitEventOnDelete), deleteObj, err)
}

// EmitEventOnGetError mocks base method.
func (m *MockK8sEventEmitter) EmitEventOnGetError(getObj client.Object, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnGetError", getObj, err)
}

// EmitEventOnGetError indicates an expected call of EmitEventOnGetError.
func (mr *MockK8sEventEmitterMockRecorder) EmitEventOnGetError(getObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnGetError", reflect.TypeOf((*MockK8sEventEmitter)(nil).EmitEventOnGetError), getObj, err)
}

// EmitEventOnList mocks base method.
func (m *MockK8sEventEmitter) EmitEventOnList(listObj client.ObjectList, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnList", listObj, err)
}

// EmitEventOnList indicates an expected call of EmitEventOnList.
func (mr *MockK8sEventEmitterMockRecorder) EmitEventOnList(listObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnList", reflect.TypeOf((*MockK8sEventEmitter)(nil).EmitEventOnList), listObj, err)
}

// EmitEventOnPatch mocks base method.
func (m *MockK8sEventEmitter) EmitEventOnPatch(patchObj client.Object, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnPatch", patchObj, err)
}

// EmitEventOnPatch indicates an expected call of EmitEventOnPatch.
func (mr *MockK8sEventEmitterMockRecorder) EmitEventOnPatch(patchObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnPatch", reflect.TypeOf((*MockK8sEventEmitter)(nil).EmitEventOnPatch), patchObj, err)
}

// EmitEventOnUpdate mocks base method.
func (m *MockK8sEventEmitter) EmitEventOnUpdate(updateObj client.Object, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventOnUpdate", updateObj, err)
}

// EmitEventOnUpdate indicates an expected call of EmitEventOnUpdate.
func (mr *MockK8sEventEmitterMockRecorder) EmitEventOnUpdate(updateObj, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventOnUpdate", reflect.TypeOf((*MockK8sEventEmitter)(nil).EmitEventOnUpdate), updateObj, err)
}

// EmitEventRollingDeployWait mocks base method.
func (m *MockK8sEventEmitter) EmitEventRollingDeployWait(k8sObj client.Object) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventRollingDeployWait", k8sObj)
}

// EmitEventRollingDeployWait indicates an expected call of EmitEventRollingDeployWait.
func (mr *MockK8sEventEmitterMockRecorder) EmitEventRollingDeployWait(k8sObj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventRollingDeployWait", reflect.TypeOf((*MockK8sEventEmitter)(nil).EmitEventRollingDeployWait), k8sObj)
}

// MockGenericEventEmitter is a mock of GenericEventEmitter interface.
type MockGenericEventEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockGenericEventEmitterMockRecorder
}

// MockGenericEventEmitterMockRecorder is the mock recorder for MockGenericEventEmitter.
type MockGenericEventEmitterMockRecorder struct {
	mock *MockGenericEventEmitter
}

// NewMockGenericEventEmitter creates a new mock instance.
func NewMockGenericEventEmitter(ctrl *gomock.Controller) *MockGenericEventEmitter {
	mock := &MockGenericEventEmitter{ctrl: ctrl}
	mock.recorder = &MockGenericEventEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericEventEmitter) EXPECT() *MockGenericEventEmitterMockRecorder {
	return m.recorder
}

// EmitEventGeneric mocks base method.
func (m *MockGenericEventEmitter) EmitEventGeneric(eventReason, msg string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEventGeneric", eventReason, msg, err)
}

// EmitEventGeneric indicates an expected call of EmitEventGeneric.
func (mr *MockGenericEventEmitterMockRecorder) EmitEventGeneric(eventReason, msg, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEventGeneric", reflect.TypeOf((*MockGenericEventEmitter)(nil).EmitEventGeneric), eventReason, msg, err)
}
